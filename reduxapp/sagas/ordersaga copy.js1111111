import { put, all,  take,  takeLatest, takeEvery, call } from "redux-saga/effects";
function getOrders() {
    let json = fetch('http://localhost:12732/api/OrderDetail/Get')
    .then(resp => resp.json());
   return Promise.resolve(json);
}

function getOrdersByFilter(expression) {
    console.log(` in call method ${JSON.stringify(expression)}`);
    console.log('Filter action watcher 3 getOrdersByFilter');
    let json = fetch ('http://localhost:12732/api/OrderDetail/Search',{
      method: 'post',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: expression
    });
    return Promise.resolve(json);
}
 
function* fetchOrders() {
    // resolved JSON data aftre the ajax call
    const response = yield call(getOrders);
    yield put({
        type: 'ORDERS_RECEIVED',
        json: response || [{ error: 'Error Occured' }]
    });
}

 
function* fetchOrdersbyfilter(data) {
    
    console.log('Filter action watcher 2' +JSON.stringify(data.expression));
    // resolved JSON data aftre the ajax call
    const response = yield call(getOrdersByFilter);
    yield put({
        type: 'ORDERS_RECEIVED_BY_FILTER',
        json: response || [{ error: 'Error Occured' }]
    });
}

function* actionWatcher() {
    // monitor GET_ORDERS action and execute fetchOrders method
    yield takeLatest('GET_ORDERS', fetchOrders);
}

function* actionWatcherbyfilter() {
    console.log('Filter action watcher 1');
    const data = yield take('GET_ORDERS_BY_FILTER');
    console.log('Filter action watcher 1' +JSON.stringify(data.expression));
    // monitor GET_ORDERS_BY_FILTER action and execute fetchOrders method
    yield takeLatest('GET_ORDERS_BY_FILTER', fetchOrdersbyfilter(data));
}



// the saga generator to watcher
export default function* rootSagaOrders() {
    yield all([
        actionWatcher(),actionWatcherbyfilter()
    ]);
}